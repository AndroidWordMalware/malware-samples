#!/usr/bin/python

import manifestDecoder

import xml.etree.ElementTree as ET
import subprocess
import sys
import os

def lookForComponentInManifest(apkfile, node, attrib):

	result = list()

	outputManifestFile = "AndroidManifest.xml.tmp"
	manifestFile = open(outputManifestFile, "w")
	manifestFile.write(manifestDecoder.extractManifest(apkfile).encode('utf-8'))
	manifestFile.close()

	command = "cat " + outputManifestFile + " | grep manifest | sed -nE 's/.*package=\"([^\"]+)\".*/\\1/p'"
	package = subprocess.check_output(command, shell=True).replace("\n", "")

	command = "cat " + outputManifestFile + " | grep " + node + " | sed -nE 's/.*" + attrib + "=\"([^\"]+)\".*/\\1/p'"
	elements = subprocess.check_output(command, shell=True)

	for element in elements.split("\n"):
		if element and element.strip():
			if(element.startswith(".")):
				result.append(package + element)
			else:
				result.append(element)

	os.remove(outputManifestFile)

	return result


def lookForComponentInDexdumpXML(apkDexFile):

	result = list()

	command = "dexdump -i -l xml " + apkDexFile
	output = subprocess.check_output(command, shell=True)
	xml = ET.fromstring(output)

	for node in xml.iter("class"):
		if node.attrib["extends"]=="android.content.BroadcastReceiver":
			package = ""
			for child in node.iter("constructor"):
				package = child.attrib["type"]
			result.append(package + "." + node.attrib["name"])

	return result


def start(apkDexFile):

	report = list()

	codeReceivers = lookForComponentInDexdumpXML(apkDexFile)
	manifestReceivers = lookForComponentInManifest(apkDexFile, "receiver", "name")

	report.append("Receivers discovered in the code:")
	for receiver in codeReceivers:
		report.append("  > " + receiver)

	report.append("\nReceivers declared in the AndroidManifest:")
	for receiver in manifestReceivers:
		report.append("  > " + receiver)

	report.append("\nReceivers discovered in the code but not in the AndroidManifest:")
	for codeReceiver in codeReceivers:
		found = False
		for manifestReceiver in manifestReceivers:
			if (codeReceiver.startswith(manifestReceiver)):
				found = True
				break
		if not found:
			report.append("  > " + codeReceiver)

	report.append("")
	return report



if __name__ == "__main__":

	if len(sys.argv) != 2 or not sys.argv[1].lower().endswith(".apk"):
		print "Expected an APK, usages:"
		print "python " + sys.argv[0] + " file.apk"
		print "python " + sys.argv[0] + " classes.dex"
		quit()

	report = start(sys.argv[1])
	for line in report:
		print line