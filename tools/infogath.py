#!/usr/bin/python

import genericFunctions
import componentFinder
import manifestDecoder
import receiversFinder

import subprocess
import shutil
import sys
import os


APKTOOL_COMMAND = "apktool d #FILE# -o #OUTPUT_DIR#"
JADX_COMMAND = "jadx -s -d #OUTPUT_DIR# #FILE#"
DEX2JAR_COMMAND = "d2j-dex2jar -f #FILE# -o #OUTPUT_DIR#"
JAR2JASMIN_COMMAND = "d2j-jar2jasmin -f #FILE# -o #OUTPUT_DIR#"
DEXDUMP_COMMAND = "dexdump -di #FILE# > #OUTPUT_FILE#"


def printTitle(title):
	print("\n ~~ " + title + " ~~\n")


def findAndReportExtension(extension):

	f = open(outputInfoFile, "a")
	f.write(sectionSymbol + " Files '" + extension + "'\n")
	try:
		files = subprocess.check_output("find " + outputZipDir + "/ | egrep \"\." + extension + "\"", shell=True)
		f.write(files)
	except:
		f.write("There aren't files with this extension")
	f.write("\n\n\n")
	f.close()


def findAndReportBinaryString(filePath, string):

	f = open(outputInfoFile, "a")
	f.write(sectionSymbol + " Binary strings '" + string + " in " + filePath + "\n")
	try:
		files = subprocess.check_output("strings " + filePath + " | egrep \"" + string + "\"", shell=True)
		f.write(files)
	except:
		f.write("String not found")
	f.write("\n\n\n")
	f.close()


def findAndReportString(dirPath, string):

	f = open(outputInfoFile, "a")
	f.write(sectionSymbol + " Strings '" + string + " in " + dirPath + "\n")
	try:
		files = subprocess.check_output("egrep -rin \"" + string + "\" " + dirPath, shell=True)
		f.write(files)
	except:
		f.write("String not found")
	f.write("\n\n\n")
	f.close()


def processNativeCode():

	nativeLibraries = list()
	try:
		result = subprocess.check_output("find " + outputZipDir + " | egrep '.so$'", shell=True)
		nativeLibraries.extend(result.split("\n"))
	except:
		print "There aren't native libraries"

	f = open(outputNativeFunctionsFile, "w")
	for nativeLibrary in nativeLibraries:
		command = ""
		if "lib/armeabi" in nativeLibrary:
			command = "arm-linux-androideabi-objdump -d " + nativeLibrary

		elif "lib/mips" in nativeLibrary:
			command = "mipsel-linux-android-objdump -d " + nativeLibrary

		elif "lib/x86" in nativeLibrary:
			command = "objdump -d " + nativeLibrary

		if command is not "":
			f.write(subprocess.check_output(command, shell=True) + "\n")

	f.close()


def extractGeneralUseInformation():

	os.makedirs(outputInfoDir)

	printTitle("unzip APK content")
	genericFunctions.unzipFileIntoDir(sample, outputZipDir)
	
	printTitle("decoding with apktool")
	os.system(APKTOOL_COMMAND.replace("#FILE#", sample).replace("#OUTPUT_DIR#", outputApktoolDir))

	printTitle("decoding with jadx")
	os.system(JADX_COMMAND.replace("#FILE#", sample).replace("#OUTPUT_DIR#", outputJadxDir))

	printTitle("decoding AndroidManifest.xml")
	manifestFile = open(outputManifestFile, "w")
	manifestFile.write(manifestDecoder.extractManifest(sample).encode('utf-8'))
	manifestFile.close()

	printTitle("extracting cert info")
	os.system("keytool -printcert -file " + outputZipDir + "/META-INF/*.RSA > " + outputInfoDir + "/cert.txt")

	printTitle("identifing file timestamps")
	os.system("unzip -l " + sample + " | awk '{print $2,$3,$4;}' | egrep '[0-9]{4}-' | sort > " + outputZipFile)

	printTitle("looking for file extensions")
	findAndReportExtension("apk")
	findAndReportExtension("jar")
	findAndReportExtension("class")
	findAndReportExtension("java")
	findAndReportExtension("so")
	findAndReportExtension("js")
	findAndReportExtension("html")

	printTitle("looking for strings")
	if os.path.exists(classesFile):
		findAndReportBinaryString(classesFile, "https?:")
		findAndReportBinaryString(classesFile, "aHR0cDo|aHR0cHM6L") # base64
		findAndReportBinaryString(classesFile, "%68%74%74%70%3A%2F%2F|%68%74%74%70%73%3A%2F%2F") # hexa
		findAndReportBinaryString(classesFile, "L[^;]+?;")

	findAndReportString(outputZipDir, "https?:")
	findAndReportString(outputZipDir, "aHR0cDo|aHR0cHM6L") # base64
	findAndReportString(outputZipDir, "%68%74%74%70%3A%2F%2F|%68%74%74%70%73%3A%2F%2F") # hexa


def extractStaticAnalysisInfo():

	processNativeCode()

	printTitle("getting jasmin code")
	os.system(DEX2JAR_COMMAND.replace("#FILE#", sample).replace("#OUTPUT_DIR#", outputJasminFile))
	os.system(JAR2JASMIN_COMMAND.replace("#FILE#", outputJasminFile).replace("#OUTPUT_DIR", outputJasminDir))

	printTitle("dumping dalvik op codes")
	os.system(DEXDUMP_COMMAND.replace("#FILE#", classesFile).replace("#OUTPUT_FILE#", outputDexdumpFile))

	f = open(outputInfoFile, "a")
	printTitle("looking for hidden receivers")
	f.write(sectionSymbol + "RECEIVERS INFO\n")
	report = receiversFinder.start(sample)
	for line in report:
		f.write(line + "\n")
	f.write("\n\n")

	printTitle("looking for components not found in the classes.dex")
	f.write(sectionSymbol + "COMPONENTS NOT FOUND\n")
	report = componentFinder.start(sample)
	for line in report:
		f.write(line + "\n")
	f.write("\n\n")

	f.close()


#	##############################
#	##############################
#	##############################

if len(sys.argv) != 2 or not sys.argv[1].lower().endswith(".apk"):
	print "Expected APK file, usage:"
	print "python " + sys.argv[0] + " /path/to/file.apk"
	quit()


currentDir = os.getcwd() + "/"
sample = currentDir + sys.argv[1]
sectionSymbol = "##@## "
sha1 = genericFunctions.getSha1FromFile(sample)


#	##############################
#	GENERAL INFORMATION GATHERING
#	##############################

outputInfoDir = currentDir + "gathering-" + sha1
outputZipDir = currentDir + "zip-" + sha1
outputApktoolDir = currentDir + "apktool-" + sha1
outputJadxDir = currentDir + "jadx-" + sha1

printTitle("initializing directories")
if os.path.exists(outputInfoDir):
	shutil.rmtree(outputInfoDir)

if os.path.exists(outputZipDir):
	shutil.rmtree(outputZipDir)

if os.path.exists(outputApktoolDir):
	shutil.rmtree(outputApktoolDir)

if os.path.exists(outputJadxDir):
	shutil.rmtree(outputJadxDir)

outputInfoFile = outputInfoDir + "/outputInfo.txt"
outputManifestFile = outputInfoDir + "/AndroidManifest.xml"
outputNativeFunctionsFile = outputInfoDir + "/javaNativeFunctions.txt"
outputZipFile = outputInfoDir + "/zipFileInfo.txt"
classesFile = outputZipDir + "/classes.dex"

printTitle("extracting data for analysis")
extractGeneralUseInformation()


#	################################
#	STATIC ANALYSIS INFO EXTRACTION
#	################################

outputJasminDir = currentDir + "jasmin-" + sha1

if os.path.exists(outputJasminDir):
	shutil.rmtree(outputJasminDir)

outputDexdumpFile = outputInfoDir + "/dexdump.txt"
outputJasminFile = outputInfoDir + "/" + sha1 + ".jar"

printTitle("extracting info for static analysis")
extractStaticAnalysisInfo()
