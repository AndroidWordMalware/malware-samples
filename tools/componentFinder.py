#!/usr/bin/python

import manifestDecoder

import xml.etree.ElementTree as ET
import subprocess
import sys
import os


def lookForComponentUsingDexdump(xml, seed):

	result = list()

	classesStack = list()
	classesStack.append(seed)

	while len(classesStack) > 0:
		parentClass = classesStack.pop()
		for node in xml.iter("class"):
			if node.attrib["extends"] == parentClass:
				package = ""
				for child in node.iter("constructor"):
					package = child.attrib["type"]
				result.append(package + "." + node.attrib["name"])
				classesStack.append(package)

	return result


def lookForComponentInManifest(apkFile, node, attrib):

	result = list()

	outputManifestFile = "AndroidManifest.xml.tmp"
	manifestFile = open(outputManifestFile, "w")
	manifestFile.write(manifestDecoder.extractManifest(apkFile).encode('utf-8'))
	manifestFile.close()

	command = "cat " + outputManifestFile + " | grep manifest | sed -nE 's/.*package=\"([^\"]+)\".*/\\1/p'"
	package = subprocess.check_output(command, shell=True).replace("\n", "")

	command = "cat " + outputManifestFile + " | grep " + node + " | sed -nE 's/.*" + attrib + "=\"([^\"]+)\".*/\\1/p'"
	elements = subprocess.check_output(command, shell=True)

	for element in elements.split("\n"):
		if element and element.strip():
			if(element.startswith(".")):
				result.append(package + element)
			else:
				result.append(element)

	os.remove(outputManifestFile)

	return result


def dumpInfo(title, elements):

	report = list()

	report.append(title + ":")
	for element in elements:
		report.append(" > " + element)

	report.append("")

	return report


def compareLists(title, manifestElements, codeElements):

	report = list()

	report.append(title + ":")
	noneFound = True
	for manifestElement in manifestElements:
		found = False
		for codeElement in codeElements:
			if (codeElement.startswith(manifestElement)):
				found = True
				break
		if not found:
			report.append("  > " + manifestElement)
			noneFound = False

	if noneFound:
		report.append(" > All declared components were found in the code")

	report.append("")
	return report


def start(apkDexFile):

	command = "dexdump -i -l xml " + apkDexFile
	output = subprocess.check_output(command, shell=True)
	xml = ET.fromstring(output)

	# get components from dexdump
	activities = lookForComponentUsingDexdump(xml, "android.app.Activity")
	receivers = lookForComponentUsingDexdump(xml, "android.content.BroadcastReceiver")
	services = lookForComponentUsingDexdump(xml, "android.app.Service")
	providers = lookForComponentUsingDexdump(xml, "android.content.ContentProvider")

	# get components from AndroidManifest.xml
	manifestActivities = lookForComponentInManifest(apkDexFile, "activity", "name")
	manifestReceivers = lookForComponentInManifest(apkDexFile, "receiver", "name")
	manifestServices = lookForComponentInManifest(apkDexFile, "service", "name")
	manifestProviders = lookForComponentInManifest(apkDexFile, "provider", "name")

	# dump info
	report = list()
	#report.extend(dumpInfo("Activities found in the code", activities))
	#report.extend(dumpInfo("Declared activities in AndroidManifest", manifestActivities))
	report.extend(compareLists("Activities declared in the manifest which haven't been found in the code", manifestActivities, activities))

	#report.extend(dumpInfo("Receivers found in the code", receivers))
	#report.extend(dumpInfo("Declared receivers in AndroidManifest", manifestReceivers))
	report.extend(compareLists("Receivers declared in the manifest which haven't been found in the code", manifestReceivers, receivers))


	#report.extend(dumpInfo("Services found in the code", services))
	#report.extend(dumpInfo("Declared services in AndroidManifest", manifestServices))
	report.extend(compareLists("Services declared in the manifest which haven't been found in the code", manifestServices, services))


	#report.extend(dumpInfo("Providers found in the code", providers))
	#report.extend(dumpInfo("Declared providers in AndroidManifest", manifestProviders))
	report.extend(compareLists("Providers declared in the manifest which haven't been found in the code", manifestProviders, providers))

	return report



if __name__ == "__main__":

	if len(sys.argv) != 2 or not sys.argv[1].lower().endswith(".apk"):
		print "Expected an APK, usages:"
		print "python " + sys.argv[0] + " file.apk"
		print "python " + sys.argv[0] + " classes.dex"
		quit()

	report = start(sys.argv[1])
	for line in report:
		print line
	
